
package ru.gb.lesson6;

import java.util.Objects;

public class Employee {
    private String firstName; // 1.1 Есть приватное поле String firstName
    private String lastName; //1.2 Есть приватное поле String lastName
    private int age; // 1.3 Приватное поле int age
    private double salary; // 1.4 Приватное поле double salary (зарплата)

    // Конструктор, принимающий все 4 поля
    public Employee(String firstName, String lastName, int age, double salary) {
        this.firstName = firstName;
        this.lastName = lastName;
        this.age = age;
        this.salary = salary;
    }

    // 3.2 Есть конструктор, который принимает firstName, lastName и возраст (зарплата по умолчанию 1_000.0)
    public Employee(String firstName, String lastName, int age) {
        this(firstName, lastName, age, 1_000.0);
    }

    // 3.3 Конструктор, принимающий firstName, lastName (зарплата по умолчанию 1_000.0, возраст по умолчанию 25)
    public Employee(String firstName, String lastName) {
        this(firstName, lastName, 25, 1_000.0);
    }

    // 2.1 Есть метод getAge
    public int getAge() {
        return age;
    }

    //2.2 Есть метод getSalary
    public double getSalary() {
        return salary;
    }

    //2.3 Есть метод getFullName
    public String getFullName() {
        return firstName + " " + lastName;
    }

    // 2.4 сеттеры
    public void setAge(int age) {
        if (age > 0) {
            this.age = age;
        }
    }

    public void setSalary(double salary) {
        if (salary > 0) {
            this.salary = salary;
        }
    }

    public void setFirstName(String firstName) {
        this.firstName = firstName;
    }

    public void setLastName(String lastName) {
        this.lastName = lastName;
    }

    // 4. Реализовать метод toString
    @Override
    public String toString() {
        return String.format("Employee[name=%s %s, age=%d, salary=%.2f]", firstName, lastName, age, salary);
    }

    // 5. Реализовать методы equals и hashCode
    @Override
    public boolean equals(Object anotherObject) {
        if (this == anotherObject) return true;
        if (anotherObject == null || getClass() != anotherObject.getClass()) return false;

        ru.gb.lesson6.Employee employee = (ru.gb.lesson6.Employee) anotherObject;
        return Objects.equals(firstName, employee.firstName) && Objects.equals(lastName, employee.lastName);
    }

    @Override
    public int hashCode() {
        return Objects.hash(firstName, lastName);
    }
}
